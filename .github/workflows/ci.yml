name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Set version
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s" }' "$version" > public/version.json

      - name: Run tests
        run: |
          npm ci  # Install all dependencies, including devDependencies
          npx playwright install --with-deps chromium
          npm run test:coverage

      - name: Update coverage
        run: |
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          color=$(echo "$coverage < 80" | bc -l | awk '{if ($1) print "red"; else print "green"}')
          curl -s -X POST "https://badge.cs329.click/badge/${{ github.repository_owner }}/jwtpizzacoverage?label=Coverage&value=$coverage%25&color=$color" -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}" -o /dev/null

      - name: Build
        run: |
          npm ci && npm run build
          cp dist/index.html dist/404.html

      - name: Update dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Dastardly Action Step
        uses: PortSwigger/dastardly-github-action@main
        with:
          target-url: 'https://pizza.startupcode.net'

  deploy:
    needs: [build, security-scan]
    permissions:
      id-token: write # Required for OIDC
      contents: read  # Optional, for artifact integrity if needed
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.build.outputs.version || github.sha }}
    environment:
      name: staging
      url: https://stage-pizza.startupcode.net
    steps:
      - name: Create OIDC token to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: dist/

      - name: Push to AWS S3
        run: |
          echo "Deploying $version"
          aws s3 cp dist s3://${{ secrets.APP_BUCKET }}/$version --recursive

      - name: Update staging version
        run: |
          # Get the current distribution and update it to use the new version
          aws cloudfront get-distribution-config --id ${{ secrets.DISTRIBUTION_ID }} > original.json
          etag=$(jq -r '.ETag' original.json)
          jq '.DistributionConfig' original.json > request.json
          jq --arg version "/$version" '.Origins.Items[].OriginPath = $version' request.json > finalRequest.json
          aws cloudfront update-distribution --id ${{ secrets.DISTRIBUTION_ID }} --if-match $etag --distribution-config file://finalRequest.json

          # Wait for the distribution to deploy and then invalidate the cache
          while [ "$(aws cloudfront get-distribution --id ${{ secrets.DISTRIBUTION_ID }} --query 'Distribution.Status' --output text)" != "Deployed" ]; do echo "Distribution is still updating..."; sleep 5; done
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"

  release:
    needs:
      - build
      - deploy
      - security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tagging

      - name: Check for existing tag
        id: check_tag
        run: |
          version="${{needs.build.outputs.version}}"
          if git tag -l "version-$version" | grep -q "version-$version"; then
            echo "Tag version-$version already exists"
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Extract issue number from commit message
        id: extract_issue
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          issue_number=$(echo "$commit_message" | grep -o '#[0-9]\+' | head -1 || echo "")
          echo "issue_number=$issue_number" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5
        env:
          version: ${{needs.build.outputs.version}}
        with:
          tag: version-${{ env.version }}
          name: Version ${{ env.version }}
          body: |
            ## ðŸš€ Changes
            ${{ github.event.head_commit.message }}
            
            Fixes ${{ steps.extract_issue.outputs.issue_number }}
            
            The factory will no longer allow a pizza to be created if the store cannot represent that it has enough cheese to complete the order. If any pizza cannot be created with a full amount of cheese, then the entire order is rejected.

            commit: ${{ github.sha }}
          makeLatest: true
          allowUpdates: true
          generateReleaseNotes: false